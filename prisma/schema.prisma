generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nApi"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// A Trip wraps HOS and DVIR
// Hour of Service (HOS)
// Driver-Vehicle Inspection Report (DVIR)
// enum DocType {
//   CRANE_FREQUENT
//   CRANE_PERIODIC
//   TRIP
//   MAINTENANCE_START
//   MAINTENANCE_END
// }

enum DocType {
  INSPECT_VEHICLE_DAILY
  INSPECT_CRANE_FREQUENT
  INSPECT_CRANE_PERIODIC
  LOG_VEHICLE
  MAINTAIN_INIT
  MAINTAIN_COMPLETE
  TRIP
}

enum DocEdgeType {
  WAYPOINT
}

enum Role {
  USER
  ADMIN
}

enum LogType {
  START
  END
}

enum InspectType {
  VEHICLE
  CRANE
}

model User {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  email          String     @unique @db.VarChar(100)
  passwordDigest String     @db.VarChar(64)
  verifyEmailToken          String?   @db.VarChar(32)
  verifyEmailTokenExpires   DateTime? @db.Timestamp
  resetPasswordToken        String?   @db.VarChar(32)
  resetPasswordTokenExpires DateTime? @db.Timestamp
  firstName      String?    @db.VarChar(24)
  lastName       String?    @db.VarChar(24)
  isVerified                Boolean   @default(false)
  isDeleted                 Boolean   @default(false)
  meta           Json?
  roles          Role[]
  sessions       Session[]
  documents      Document[]
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expires      DateTime
  token     String   @db.VarChar(40)
  valid     Boolean  @default(true)
  ip        String   @db.VarChar(40)
  userAgent String   @db.VarChar(200)
  refreshCount Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

// These models are to speed up the minimum viable product and get it shipped

model DailyInspect {
  id       Int         @id @default(autoincrement())
  type     InspectType
  datetime DateTime
  hours    Int
  meta     Json

  @@index([type])
}

model DailyLog {
  id       Int      @id @default(autoincrement())
  type     LogType
  datetime DateTime
  miles    Int
  meta     Json
}

model Document {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      DocType
  datetime  DateTime
  hours     Int?
  miles     Int?
  pass      Boolean?
  meta      Json?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  // NOTE: The relation linking took some time to figureout, they need to be reversed on these models.
  parents   DocEdge[] @relation("Child")
  children  DocEdge[] @relation("Parent")

  @@index([type])
}

model DocEdge {
  assignedAt DateTime    @default(now())
  type       DocEdgeType
  meta       Json?
  parent     Document    @relation(name: "Parent", fields: [parentId], references: [id])
  parentId   Int // relation scalar field (used in the `@relation` attribute above)
  child      Document    @relation(name: "Child", fields: [childId], references: [id])
  childId    Int // relation scalar field (used in the `@relation` attribute above)

  @@id([parentId, childId])
  @@index([type])
}
