### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Comment {
  author: User!
  comment: String!
  createdAt: DateTime!
  id: Int!
  post: Post!
}

input CommentCreateInput {
  comment: String!
}

type DailyInspect {
  datetime: DateTime!
  hours: Int!
  id: Int!
  meta: JSONObject
  type: InspectType!
}

input DailyInspectCreateInput {
  datetime: DateTime!
  hours: Int!
  meta: JSONObject
  type: InspectType!
}

input DailyInspectUniqueInput {
  id: Int!
}

type DailyLog {
  datetime: DateTime!
  id: Int!
  meta: JSONObject
  miles: Int!
  type: LogType!
}

input DailyLogCreateInput {
  datetime: DateTime!
  meta: JSONObject
  miles: Int!
  type: LogType!
}

input DailyLogUniqueInput {
  id: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DocumentEdge {
  child: DocumentNode!
  parent: DocumentNode!
  type: DocumentEdgeType!
}

enum DocumentEdgeType {
  DEFICIENCY
  INSPECTION
  LINK
  MAINTENANCE
  RULE
  SCHEDULE
}

type DocumentNode {
  children: [DocumentEdge!]!
  id: Int!
  name: String!
  parents: [DocumentEdge!]!
  text: String
  type: DocumentNodeType!
}

enum DocumentNodeType {
  FORM
  ITEM
  RECORD
  ROOT
  SUBITEM
  TYPE
}

enum InspectType {
  CRANE
  VEHICLE
}

type Item {
  children: [DocumentEdge!]!
  id: Int!
  meta: JSONObject
  name: String!
  text: String
}

input ItemCreateInput {
  meta: JSONObject
  name: String!
  text: String
}

input ItemUniqueInput {
  email: String
  id: Int
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum LogType {
  END
  START
}

type LoginResponse {
  token: String!
  tokenExpires: DateTime!
  user: User!
}

type Mutation {
  createComment(authorEmail: String!, data: CommentCreateInput!, postId: Int!): Comment
  createDailyInspect(data: DailyInspectCreateInput!): DailyInspect
  createDailyLog(data: DailyLogCreateInput!): DailyLog
  createDraft(authorEmail: String!, data: PostCreateInput!): Post
  createItem(data: ItemCreateInput!): Item
  deletePost(id: Int!): Post
  likePost(id: Int!): Post
  login(email: String!, password: String!): LoginResponse!
  signupUser(data: UserCreateInput!): User!
  togglePublishPost(id: Int!, published: Boolean!): Post
}

type Post {
  author: User
  comments: [Comment!]!
  content: String
  createdAt: DateTime!
  id: Int!
  likes: Int!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

input PostCreateInput {
  content: String
  title: String!
}

input PostOrderByUpdatedAtInput {
  updatedAt: SortOrder!
}

type Query {
  allDailyInspects: [DailyInspect!]!
  allDailyLogs: [DailyLog!]!
  allItems: [Item!]!
  allUsers: [User!]!
  dailyInspectById(id: Int!): DailyInspect
  dailyLogsById(id: Int!): DailyLog
  draftsByUser(userUniqueInput: UserUniqueInput!): [Post]
  feed(orderBy: PostOrderByUpdatedAtInput, published: Boolean, searchString: String, skip: Int, take: Int): [Post!]!
  me: User
  postById(id: Int!): Post
  status: Status
}

enum Role {
  ADMIN
  USER
}

enum SortOrder {
  asc
  desc
}

type Status {
  up: Boolean
}

type User {
  email: String!
  firstName: String
  id: Int!
  lastName: String
  posts: [Post!]!
  roles: [Role!]!
}

input UserCreateInput {
  email: String!
  firstName: String
  lastName: String
  posts: [PostCreateInput!]
}

input UserUniqueInput {
  email: String
  id: Int
}
