### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AccessTokenResponse {
  token: String!
  tokenExpires: DateTime!
}

type DailyInspect {
  datetime: DateTime!
  hours: Int!
  id: Int!
  meta: JSONObject
  type: InspectType!
}

input DailyInspectCreateInput {
  datetime: DateTime!
  hours: Int!
  meta: JSONObject
  type: InspectType!
}

input DailyInspectUniqueInput {
  id: Int!
}

type DailyLog {
  datetime: DateTime!
  id: Int!
  meta: JSONObject
  miles: Int!
  type: LogType!
}

input DailyLogCreateInput {
  datetime: DateTime!
  meta: JSONObject
  miles: Int!
  type: LogType!
}

input DailyLogUniqueInput {
  id: Int!
}

type DailyVehicleInspect {
  datetime: DateTime!
  id: Int!
  meta: JSONObject
  miles: Int!
}

input DailyVehicleInspectCreateInput {
  datetime: DateTime!
  meta: JSONObject
  miles: Int!
}

input DailyVehicleInspectUniqueInput {
  id: Int!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type FrequentInspect {
  datetime: DateTime!
  hours: Int!
  id: Int!
  meta: JSONObject
}

input FrequentInspectCreateInput {
  datetime: DateTime!
  hours: Int!
  meta: JSONObject
}

input FrequentInspectUniqueInput {
  id: Int!
}

enum InspectType {
  CRANE
  VEHICLE
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum LogType {
  END
  START
}

type Mutation {
  createDailyInspect(data: DailyInspectCreateInput!): DailyInspect
  createDailyLog(data: DailyLogCreateInput!): DailyLog
  createDailyVehicleInspect(data: DailyVehicleInspectCreateInput!): DailyVehicleInspect
  createFrequentInspect(data: FrequentInspectCreateInput!): FrequentInspect
}

type Query {
  allDailyInspects: [DailyInspect!]!
  allDailyLogs: [DailyLog!]!
  dailyInspectByDate(date: Date!): [DailyInspect!]!
  dailyInspectById(id: Int!): DailyInspect
  dailyLogsById(id: Int!): DailyLog
  dailyVehicleInspectByDate(date: Date!): [DailyVehicleInspect!]!
  dailyVehicleInspectById(id: Int!): DailyVehicleInspect
  frequentInspectByDate(date: Date!): [FrequentInspect!]!
  frequentInspectById(id: Int!): FrequentInspect
  me: User
  recentDailyVehicleInspects: [DailyVehicleInspect!]!
  recentFrequentInspects: [FrequentInspect!]!
  status: Status
}

enum Role {
  ADMIN
  USER
}

enum SortOrder {
  asc
  desc
}

type Status {
  up: Boolean
}

type User {
  email: String!
  firstName: String
  id: Int!
  lastName: String
  roles: [Role!]!
}

input UserCreateInput {
  email: String!
  firstName: String
  lastName: String
}

input UserUniqueInput {
  email: String
  id: Int
}
